// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZmsServiceClient is the client API for ZmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZmsServiceClient interface {
	// StartLocalZone starts a Zone on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the zms/config.yaml
	//   3. all bytes constituting the Zone YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalZone(ctx context.Context, opts ...grpc.CallOption) (ZmsService_StartLocalZoneClient, error)
	// StartFromPreviousZone starts a new Zone based on a previous one.
	// If the previous Zone does not have the can-replay condition set this call will result in an error.
	StartFromPreviousZone(ctx context.Context, in *StartFromPreviousZoneRequest, opts ...grpc.CallOption) (*StartZoneResponse, error)
	// StartZoneRequest starts a new Zone based on its specification.
	StartZone(ctx context.Context, in *StartZoneRequest, opts ...grpc.CallOption) (*StartZoneResponse, error)
	// Searches for Zone(s) known to this instance
	ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error)
	// Subscribe listens to new Zone(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ZmsService_SubscribeClient, error)
	// GetZone retrieves details of a single Zone
	GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneResponse, error)
	// Listen listens to Zone updates and log output of a running Zone
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ZmsService_ListenClient, error)
	// StopZone stops a currently running Zone
	StopZone(ctx context.Context, in *StopZoneRequest, opts ...grpc.CallOption) (*StopZoneResponse, error)
}

type zmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZmsServiceClient(cc grpc.ClientConnInterface) ZmsServiceClient {
	return &zmsServiceClient{cc}
}

func (c *zmsServiceClient) StartLocalZone(ctx context.Context, opts ...grpc.CallOption) (ZmsService_StartLocalZoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZmsService_ServiceDesc.Streams[0], "/v1.ZmsService/StartLocalZone", opts...)
	if err != nil {
		return nil, err
	}
	x := &zmsServiceStartLocalZoneClient{stream}
	return x, nil
}

type ZmsService_StartLocalZoneClient interface {
	Send(*StartLocalZoneRequest) error
	CloseAndRecv() (*StartZoneResponse, error)
	grpc.ClientStream
}

type zmsServiceStartLocalZoneClient struct {
	grpc.ClientStream
}

func (x *zmsServiceStartLocalZoneClient) Send(m *StartLocalZoneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zmsServiceStartLocalZoneClient) CloseAndRecv() (*StartZoneResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartZoneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zmsServiceClient) StartFromPreviousZone(ctx context.Context, in *StartFromPreviousZoneRequest, opts ...grpc.CallOption) (*StartZoneResponse, error) {
	out := new(StartZoneResponse)
	err := c.cc.Invoke(ctx, "/v1.ZmsService/StartFromPreviousZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zmsServiceClient) StartZone(ctx context.Context, in *StartZoneRequest, opts ...grpc.CallOption) (*StartZoneResponse, error) {
	out := new(StartZoneResponse)
	err := c.cc.Invoke(ctx, "/v1.ZmsService/StartZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zmsServiceClient) ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (*ListZonesResponse, error) {
	out := new(ListZonesResponse)
	err := c.cc.Invoke(ctx, "/v1.ZmsService/ListZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zmsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ZmsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZmsService_ServiceDesc.Streams[1], "/v1.ZmsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &zmsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZmsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type zmsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *zmsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zmsServiceClient) GetZone(ctx context.Context, in *GetZoneRequest, opts ...grpc.CallOption) (*GetZoneResponse, error) {
	out := new(GetZoneResponse)
	err := c.cc.Invoke(ctx, "/v1.ZmsService/GetZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zmsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ZmsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ZmsService_ServiceDesc.Streams[2], "/v1.ZmsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &zmsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ZmsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type zmsServiceListenClient struct {
	grpc.ClientStream
}

func (x *zmsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zmsServiceClient) StopZone(ctx context.Context, in *StopZoneRequest, opts ...grpc.CallOption) (*StopZoneResponse, error) {
	out := new(StopZoneResponse)
	err := c.cc.Invoke(ctx, "/v1.ZmsService/StopZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZmsServiceServer is the server API for ZmsService service.
// All implementations must embed UnimplementedZmsServiceServer
// for forward compatibility
type ZmsServiceServer interface {
	// StartLocalZone starts a Zone on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the zms/config.yaml
	//   3. all bytes constituting the Zone YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalZone(ZmsService_StartLocalZoneServer) error
	// StartFromPreviousZone starts a new Zone based on a previous one.
	// If the previous Zone does not have the can-replay condition set this call will result in an error.
	StartFromPreviousZone(context.Context, *StartFromPreviousZoneRequest) (*StartZoneResponse, error)
	// StartZoneRequest starts a new Zone based on its specification.
	StartZone(context.Context, *StartZoneRequest) (*StartZoneResponse, error)
	// Searches for Zone(s) known to this instance
	ListZones(context.Context, *ListZonesRequest) (*ListZonesResponse, error)
	// Subscribe listens to new Zone(s) updates
	Subscribe(*SubscribeRequest, ZmsService_SubscribeServer) error
	// GetZone retrieves details of a single Zone
	GetZone(context.Context, *GetZoneRequest) (*GetZoneResponse, error)
	// Listen listens to Zone updates and log output of a running Zone
	Listen(*ListenRequest, ZmsService_ListenServer) error
	// StopZone stops a currently running Zone
	StopZone(context.Context, *StopZoneRequest) (*StopZoneResponse, error)
	mustEmbedUnimplementedZmsServiceServer()
}

// UnimplementedZmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedZmsServiceServer struct {
}

func (UnimplementedZmsServiceServer) StartLocalZone(ZmsService_StartLocalZoneServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalZone not implemented")
}
func (UnimplementedZmsServiceServer) StartFromPreviousZone(context.Context, *StartFromPreviousZoneRequest) (*StartZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousZone not implemented")
}
func (UnimplementedZmsServiceServer) StartZone(context.Context, *StartZoneRequest) (*StartZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartZone not implemented")
}
func (UnimplementedZmsServiceServer) ListZones(context.Context, *ListZonesRequest) (*ListZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListZones not implemented")
}
func (UnimplementedZmsServiceServer) Subscribe(*SubscribeRequest, ZmsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedZmsServiceServer) GetZone(context.Context, *GetZoneRequest) (*GetZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZone not implemented")
}
func (UnimplementedZmsServiceServer) Listen(*ListenRequest, ZmsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedZmsServiceServer) StopZone(context.Context, *StopZoneRequest) (*StopZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopZone not implemented")
}
func (UnimplementedZmsServiceServer) mustEmbedUnimplementedZmsServiceServer() {}

// UnsafeZmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZmsServiceServer will
// result in compilation errors.
type UnsafeZmsServiceServer interface {
	mustEmbedUnimplementedZmsServiceServer()
}

func RegisterZmsServiceServer(s grpc.ServiceRegistrar, srv ZmsServiceServer) {
	s.RegisterService(&ZmsService_ServiceDesc, srv)
}

func _ZmsService_StartLocalZone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZmsServiceServer).StartLocalZone(&zmsServiceStartLocalZoneServer{stream})
}

type ZmsService_StartLocalZoneServer interface {
	SendAndClose(*StartZoneResponse) error
	Recv() (*StartLocalZoneRequest, error)
	grpc.ServerStream
}

type zmsServiceStartLocalZoneServer struct {
	grpc.ServerStream
}

func (x *zmsServiceStartLocalZoneServer) SendAndClose(m *StartZoneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zmsServiceStartLocalZoneServer) Recv() (*StartLocalZoneRequest, error) {
	m := new(StartLocalZoneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ZmsService_StartFromPreviousZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZmsServiceServer).StartFromPreviousZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ZmsService/StartFromPreviousZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZmsServiceServer).StartFromPreviousZone(ctx, req.(*StartFromPreviousZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZmsService_StartZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZmsServiceServer).StartZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ZmsService/StartZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZmsServiceServer).StartZone(ctx, req.(*StartZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZmsService_ListZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZmsServiceServer).ListZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ZmsService/ListZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZmsServiceServer).ListZones(ctx, req.(*ListZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZmsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZmsServiceServer).Subscribe(m, &zmsServiceSubscribeServer{stream})
}

type ZmsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type zmsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *zmsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ZmsService_GetZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZmsServiceServer).GetZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ZmsService/GetZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZmsServiceServer).GetZone(ctx, req.(*GetZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZmsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZmsServiceServer).Listen(m, &zmsServiceListenServer{stream})
}

type ZmsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type zmsServiceListenServer struct {
	grpc.ServerStream
}

func (x *zmsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ZmsService_StopZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZmsServiceServer).StopZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ZmsService/StopZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZmsServiceServer).StopZone(ctx, req.(*StopZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZmsService_ServiceDesc is the grpc.ServiceDesc for ZmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ZmsService",
	HandlerType: (*ZmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousZone",
			Handler:    _ZmsService_StartFromPreviousZone_Handler,
		},
		{
			MethodName: "StartZone",
			Handler:    _ZmsService_StartZone_Handler,
		},
		{
			MethodName: "ListZones",
			Handler:    _ZmsService_ListZones_Handler,
		},
		{
			MethodName: "GetZone",
			Handler:    _ZmsService_GetZone_Handler,
		},
		{
			MethodName: "StopZone",
			Handler:    _ZmsService_StopZone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalZone",
			Handler:       _ZmsService_StartLocalZone_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ZmsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _ZmsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zms.proto",
}
